/**
 * Any client-server message should fit this structure
 */
export interface Message {
  /**
   * Unique identifier of a message.
   * Uses nanoid(10).
   *
   * In case of ResponseMessage, there will be an id of a message to respond
   * In case of NewMessage, there will be an unique id
   */
  messageId: string;

  /**
   * Any payload like workspaces and etc.
   */
  payload: MessagePayload;
}

/**
 * Message sent in response to another message
 * Contains 'messageId' of the message to reply and the 'payload'
 * Does not contains 'type'
 */
export interface ResponseMessage extends Message {
}

/**
 * Message generated by Client or an API
 * Contains the 'type' field
 */
export interface NewMessage extends Message {
  /**
   * Message type definition,
   * for example 'authorize' or 'update-workspace'
   */
  type: string;
}

/**
 * Message can contain any data at payload
 */
export type MessagePayload = { [key: string]: unknown }

/**
 * Before the type-validation we should all messages as possible invalid with unknown field types
 */
export type PossibleInvalidMessage = Record<string, unknown>;